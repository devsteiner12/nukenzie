{"ast":null,"code":"var _jsxFileName = \"/home/diogosteiner/\\xC1rea de Trabalho/nukenzie/src/contexts/TransactionsContext/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { Global } from \"../../utils/global\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport const TransactionsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [liTransactions, setListTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransaction] = useState([]);\n\n  const handleAddTransaction = _ref2 => {\n    let {\n      description,\n      type,\n      value\n    } = _ref2;\n\n    if (description.trim() != \"\") {\n      const transaction = {\n        description: description,\n        type: type,\n        value: value\n      };\n      const newListTransactions = Global.handleGeneratorIds([...listTransactions, transaction]);\n      setListTransactions(newListTransactions);\n    }\n  };\n\n  const handleRmvTransaction = selectedTransaction => {\n    const newListTransactions = listTransactions.filter(_ref3 => {\n      let {\n        id\n      } = _ref3;\n      return id != selectedTransaction.id;\n    });\n    setListTransactions(newListTransactions);\n  };\n\n  const handleFilterTransactions = selectedType => {\n    if (selectedType == \"all\") {\n      setFilteredTransaction([]);\n    } else {\n      const listFiltered = listTransactions.filter(_ref4 => {\n        let {\n          type\n        } = _ref4;\n        return type == selectedType;\n      });\n      setFilteredTransaction(listFiltered);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      listTransactions,\n      handleAddTransaction,\n      handleRmvTransaction,\n      handleFilterTransactions,\n      filteredTransactions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsProvider, \"Hf5LtxpvCCauoeQ5pzx9zkgk2XQ=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"names":["createContext","useState","Global","TransactionsContext","TransactionsProvider","children","liTransactions","setListTransactions","filteredTransactions","setFilteredTransaction","handleAddTransaction","description","type","value","trim","transaction","newListTransactions","handleGeneratorIds","listTransactions","handleRmvTransaction","selectedTransaction","filter","id","handleFilterTransactions","selectedType","listFiltered"],"sources":["/home/diogosteiner/Área de Trabalho/nukenzie/src/contexts/TransactionsContext/index.tsx"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport {\n  iTransaction,\n  iTransactionContext,\n  iTransactionsProviderProps,\n} from \"./types\";\nimport { Global } from \"../../utils/global\";\n\nexport const TransactionsContext = createContext({} as iTransactionContext);\n\nexport const TransactionsProvider = ({\n  children,\n}: iTransactionsProviderProps) => {\n  const [liTransactions, setListTransactions] = useState<iTransaction[] | []>(\n    []\n  );\n  const [filteredTransactions, setFilteredTransaction] = useState(\n    [] as iTransaction[]\n  );\n\n  const handleAddTransaction = ({\n    description,\n    type,\n    value,\n  }: iTransaction): void => {\n    if (description.trim() != \"\") {\n      const transaction = {\n        description: description,\n        type: type,\n        value: value,\n      };\n      const newListTransactions = Global.handleGeneratorIds([\n        ...listTransactions,\n        transaction,\n      ]);\n      setListTransactions(newListTransactions);\n    }\n  };\n\n  const handleRmvTransaction = (selectedTransaction: iTransaction): void => {\n    const newListTransactions = listTransactions.filter(\n      ({ id }) => id != selectedTransaction.id\n    );\n    setListTransactions(newListTransactions);\n  };\n\n  const handleFilterTransactions = (selectedType: string): void => {\n    if (selectedType == \"all\") {\n      setFilteredTransaction([]);\n    } else {\n      const listFiltered = listTransactions.filter(\n        ({ type }) => type == selectedType\n      );\n      setFilteredTransaction(listFiltered);\n    }\n  };\n\n  return (\n    <TransactionsContext.Provider\n      value={{\n        listTransactions,\n        handleAddTransaction,\n        handleRmvTransaction,\n        handleFilterTransactions,\n        filteredTransactions,\n      }}\n    >\n      {children}\n    </TransactionsContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAMA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,OAAO,MAAMC,mBAAmB,gBAAGH,aAAa,CAAC,EAAD,CAAzC;AAEP,OAAO,MAAMI,oBAAoB,GAAG,QAEF;EAAA;;EAAA,IAFG;IACnCC;EADmC,CAEH;EAChC,MAAM,CAACC,cAAD,EAAiBC,mBAAjB,IAAwCN,QAAQ,CACpD,EADoD,CAAtD;EAGA,MAAM,CAACO,oBAAD,EAAuBC,sBAAvB,IAAiDR,QAAQ,CAC7D,EAD6D,CAA/D;;EAIA,MAAMS,oBAAoB,GAAG,SAIH;IAAA,IAJI;MAC5BC,WAD4B;MAE5BC,IAF4B;MAG5BC;IAH4B,CAIJ;;IACxB,IAAIF,WAAW,CAACG,IAAZ,MAAsB,EAA1B,EAA8B;MAC5B,MAAMC,WAAW,GAAG;QAClBJ,WAAW,EAAEA,WADK;QAElBC,IAAI,EAAEA,IAFY;QAGlBC,KAAK,EAAEA;MAHW,CAApB;MAKA,MAAMG,mBAAmB,GAAGd,MAAM,CAACe,kBAAP,CAA0B,CACpD,GAAGC,gBADiD,EAEpDH,WAFoD,CAA1B,CAA5B;MAIAR,mBAAmB,CAACS,mBAAD,CAAnB;IACD;EACF,CAjBD;;EAmBA,MAAMG,oBAAoB,GAAIC,mBAAD,IAA6C;IACxE,MAAMJ,mBAAmB,GAAGE,gBAAgB,CAACG,MAAjB,CAC1B;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAYA,EAAE,IAAIF,mBAAmB,CAACE,EAAtC;IAAA,CAD0B,CAA5B;IAGAf,mBAAmB,CAACS,mBAAD,CAAnB;EACD,CALD;;EAOA,MAAMO,wBAAwB,GAAIC,YAAD,IAAgC;IAC/D,IAAIA,YAAY,IAAI,KAApB,EAA2B;MACzBf,sBAAsB,CAAC,EAAD,CAAtB;IACD,CAFD,MAEO;MACL,MAAMgB,YAAY,GAAGP,gBAAgB,CAACG,MAAjB,CACnB;QAAA,IAAC;UAAET;QAAF,CAAD;QAAA,OAAcA,IAAI,IAAIY,YAAtB;MAAA,CADmB,CAArB;MAGAf,sBAAsB,CAACgB,YAAD,CAAtB;IACD;EACF,CATD;;EAWA,oBACE,QAAC,mBAAD,CAAqB,QAArB;IACE,KAAK,EAAE;MACLP,gBADK;MAELR,oBAFK;MAGLS,oBAHK;MAILI,wBAJK;MAKLf;IALK,CADT;IAAA,UASGH;EATH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CA5DM;;GAAMD,oB;;KAAAA,oB"},"metadata":{},"sourceType":"module"}