{"ast":null,"code":"var _jsxFileName = \"/home/diogosteiner/\\xC1rea de Trabalho/nukenzie/src/contexts/TransactionsContext/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { Global } from \"../../utils/global\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport const TransactionsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [listTransactions, setListTransactions] = useState([]);\n  const [renderTrnsactions, setRenderTransactions] = useState([]);\n\n  const handleAddTransaction = data => {\n    const newTransactions = Global.handleGeneratorIds([...listTransactions, data]);\n    setListTransactions(newTransactions);\n    setRenderTransactions(newTransactions);\n  };\n\n  const handleRmvTransaction = selectedTransaction => {\n    const newTransactions = listTransactions.filter(_ref2 => {\n      let {\n        id\n      } = _ref2;\n      return id != selectedTransaction.id;\n    });\n    setListTransactions(newTransactions);\n    setRenderTransactions(newTransactions);\n  };\n\n  const handleFilterTransactions = selectedType => {\n    if (selectedType == \"all\") {\n      setFilteredTransaction([]);\n      setRenderTransactions(listTransactions);\n    } else {\n      const listFiltered = listTransactions.filter(_ref3 => {\n        let {\n          type\n        } = _ref3;\n        return type == selectedType;\n      });\n      setFilteredTransaction(listFiltered);\n      setRenderTransactions(listFiltered);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      handleAddTransaction,\n      handleRmvTransaction,\n      handleFilterTransactions,\n      renderTrnsactions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsProvider, \"goWBosxNMYWu/COMy2Dah6JJfc4=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"names":["createContext","useState","Global","TransactionsContext","TransactionsProvider","children","listTransactions","setListTransactions","renderTrnsactions","setRenderTransactions","handleAddTransaction","data","newTransactions","handleGeneratorIds","handleRmvTransaction","selectedTransaction","filter","id","handleFilterTransactions","selectedType","setFilteredTransaction","listFiltered","type"],"sources":["/home/diogosteiner/Área de Trabalho/nukenzie/src/contexts/TransactionsContext/index.tsx"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport {\n  iTransaction,\n  iTransactionContext,\n  iTransactionsProviderProps,\n} from \"./types\";\nimport { Global } from \"../../utils/global\";\n\nexport const TransactionsContext = createContext({} as iTransactionContext);\n\nexport const TransactionsProvider = ({\n  children,\n}: iTransactionsProviderProps) => {\n  const [listTransactions, setListTransactions] = useState<iTransaction[] | []>(\n    []\n  );\n\n  const [renderTrnsactions, setRenderTransactions] = useState<\n    iTransaction[] | []\n  >([]);\n\n  const handleAddTransaction = (data: iTransaction): void => {\n    const newTransactions = Global.handleGeneratorIds([\n      ...listTransactions,\n      data,\n    ]);\n    setListTransactions(newTransactions);\n    setRenderTransactions(newTransactions);\n  };\n\n  const handleRmvTransaction = (selectedTransaction: iTransaction): void => {\n    const newTransactions = listTransactions.filter(\n      ({ id }) => id != selectedTransaction.id\n    );\n    setListTransactions(newTransactions);\n    setRenderTransactions(newTransactions);\n  };\n\n  const handleFilterTransactions = (selectedType: string): void => {\n    if (selectedType == \"all\") {\n      setFilteredTransaction([]);\n      setRenderTransactions(listTransactions);\n    } else {\n      const listFiltered = listTransactions.filter(\n        ({ type }) => type == selectedType\n      );\n      setFilteredTransaction(listFiltered);\n      setRenderTransactions(listFiltered);\n    }\n  };\n\n  return (\n    <TransactionsContext.Provider\n      value={{\n        handleAddTransaction,\n        handleRmvTransaction,\n        handleFilterTransactions,\n\n        renderTrnsactions,\n      }}\n    >\n      {children}\n    </TransactionsContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAMA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,OAAO,MAAMC,mBAAmB,gBAAGH,aAAa,CAAC,EAAD,CAAzC;AAEP,OAAO,MAAMI,oBAAoB,GAAG,QAEF;EAAA;;EAAA,IAFG;IACnCC;EADmC,CAEH;EAChC,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CACtD,EADsD,CAAxD;EAIA,MAAM,CAACO,iBAAD,EAAoBC,qBAApB,IAA6CR,QAAQ,CAEzD,EAFyD,CAA3D;;EAIA,MAAMS,oBAAoB,GAAIC,IAAD,IAA8B;IACzD,MAAMC,eAAe,GAAGV,MAAM,CAACW,kBAAP,CAA0B,CAChD,GAAGP,gBAD6C,EAEhDK,IAFgD,CAA1B,CAAxB;IAIAJ,mBAAmB,CAACK,eAAD,CAAnB;IACAH,qBAAqB,CAACG,eAAD,CAArB;EACD,CAPD;;EASA,MAAME,oBAAoB,GAAIC,mBAAD,IAA6C;IACxE,MAAMH,eAAe,GAAGN,gBAAgB,CAACU,MAAjB,CACtB;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAYA,EAAE,IAAIF,mBAAmB,CAACE,EAAtC;IAAA,CADsB,CAAxB;IAGAV,mBAAmB,CAACK,eAAD,CAAnB;IACAH,qBAAqB,CAACG,eAAD,CAArB;EACD,CAND;;EAQA,MAAMM,wBAAwB,GAAIC,YAAD,IAAgC;IAC/D,IAAIA,YAAY,IAAI,KAApB,EAA2B;MACzBC,sBAAsB,CAAC,EAAD,CAAtB;MACAX,qBAAqB,CAACH,gBAAD,CAArB;IACD,CAHD,MAGO;MACL,MAAMe,YAAY,GAAGf,gBAAgB,CAACU,MAAjB,CACnB;QAAA,IAAC;UAAEM;QAAF,CAAD;QAAA,OAAcA,IAAI,IAAIH,YAAtB;MAAA,CADmB,CAArB;MAGAC,sBAAsB,CAACC,YAAD,CAAtB;MACAZ,qBAAqB,CAACY,YAAD,CAArB;IACD;EACF,CAXD;;EAaA,oBACE,QAAC,mBAAD,CAAqB,QAArB;IACE,KAAK,EAAE;MACLX,oBADK;MAELI,oBAFK;MAGLI,wBAHK;MAKLV;IALK,CADT;IAAA,UASGH;EATH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAtDM;;GAAMD,oB;;KAAAA,oB"},"metadata":{},"sourceType":"module"}